---
import MarkdownIt from 'markdown-it'
import { format, parseISO } from 'date-fns'
import EditorLayout from '@layouts/EditorLayout.astro'
import { getLinks, getPost } from '@api/index'

const links = await getLinks()

const { slug } = Astro.params
const post = await getPost(slug as string)

if (!post) {
  return Astro.redirect('/404')
}

const current_tab = {
  name: slug as string,
  icon: 'carbon:document'
}

const tabs = [
  current_tab
]

const md = MarkdownIt({
  html: true,
  linkify: true,
  typographer: true
})
---

<EditorLayout current_tab={current_tab} extension="post" links={links} tabs={tabs} print>
  <div class="relative">
    <div class="absolute bottom-0 left-0 w-full px-4 py-2 bg-slate-900/50 backdrop-blur-sm">
      <div class="flex flex-col sm:items-center sm:justify-between sm:flex-row">
        <div>
          <div class="text-xl drop-shadow-sm text-slate-300">{post.title}</div>
          <div class="mt-1 text-xs drop-shadow-sm text-slate-500"><span
              class="text-slate-400">{format(parseISO(post.date_created as string), 'dd MM yyyy')}</span> by
            <span class="text-slate-400">{post.user_created.first_name} {post.user_created.last_name}</span>
          </div>
        </div>
        {post.tags &&
        <div class="flex gap-2 mt-1 sm:mt-0">
          {post.tags.map(tag =>
          <div
            class="px-2 py-1 text-xs capitalize border rounded-md select-none border-b-3 border-slate-900/60 bg-slate-700/40">
            {tag.tags_id.name}
          </div>
          )}
        </div>
        }
      </div>
    </div>
    <img src={`${import.meta.env.DIRECTUS_URL}assets/${post.cover_image}/cover.jpg`} alt="Cover Image"
      class="object-cover w-full aspect-video max-h-72" />
  </div>
  {post.summary && <div class="m-4 text-slate-500">{post.summary}</div>}
  {async() => <div class="m-4" set:html={md.render(post.content)}></div>}
</EditorLayout>